Timestamp,What is your experience level with SymPy?,Q1,What do you use SymPy's code generation for?,Q2,What do you use SymPy's code generation for? (Anything else),Q2 Categories,What type of code do you generate using SymPy?,Q3,What type of code do you generate using SymPy? (Anything else),Q2 Languages,Which SymPy code generation tools do you use?,Which SymPy code generation tools do you use? (Anything else),What do we need to improve about SymPy's code generation?,What do we need to improve about SymPy's code generation? (Anything else),Are there any other comments you'd like to make?
2022/09/19 2:31:29 PM GMT+2,High,3,In production code,4,,,Code that can be called from Python;Code that can be called from another language (which one? please specify below);Code snippets to copy-paste into non-Python code,"1,2,3",C,C,"Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below);Autowrap (sympy.autowrap)","Lambdify with Numpy or Mpmath, autowrap with C","Improved documentation (e.g. greater explanation, more worked examples);Code generation of derivatives (i.e. gradients, Jacobians, Hessians)",,
2022/09/19 2:33:27 PM GMT+2,average,2,"In scientific research (which field? e.g. machine learning, chemistry, robotics etc.)",3,,,Code that can be called from Python,1,,,"Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below);Autowrap (sympy.autowrap)","NumPy or JAX for lambdify, autowrap compile times are slow","Improved documentation (e.g. greater explanation, more worked examples);Code generation of derivatives (i.e. gradients, Jacobians, Hessians)",,Nice to have JAX supported in lambdify because I need derivatives of my functions for my work
2022/09/19 2:38:07 PM GMT+2,Have used it since the beginner see - https://galgebra.readthedocs.io/en/latest/,3,,,"I don't use the existing code generation.  I have written code to expose the Asymptote graphics software from python.  Asymptote has it's own programming language which is reasonably fast in plotting  tens of thousands of points (2D, 3D, Webgl).  It is also tightly integrated with TeX for annotations of all kinds.  Here is the Asymptote website -

https://asymptote.sourceforge.io/ 

Please look at all the galleries.

Exposing the graphics commands is not difficult.  Converting to the Asymptote programming language for speed much more so.",,Code that can be called from another language (which one? please specify below),2,Asymptote,,"Printers (sympy.printing, which language? please specify below)",Simple text printer,Generate code that can be called from more languages (which ones? please specify below),Asymptote code generator,Sympy is great software.  I could not have written the original galgebra without it.  My only experience with code generation is having python/sympy write the Asymptote code defining a piecewise function from my custom PieceWiseFunction class.
2022/09/19 3:11:31 PM GMT+2,"Medium, I use mostly sympy.physics.mechanics",2,In notebooks/simple scripts that are run few times,2,"I play around with sympy.physics.mechanics, I am a semi-retired salesman, who studied mechanical engineering 45 years ago.",Mechanics,Code that can be called from Python,1,"I generate equations of motion with sympy.physics.mechanics, just for fun, no use.",,"Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below)",,,"Recently, I tried to lambdify the Jacobian of a function containing the sm.Heaviside function.
Quite correctly, the Jacobian contained sm.DiracDelta functions - which lambdify could not handle. I have no idea, whether there even is a mathematically correct way to lambdify this DiracDelta function. ( there seems to be no numpy.DiracDelta function.)","In lambdify(..) the keyword cse=True, speeds up numerical integration tremendously!
This has helped integrating large equations of motion. "
2022/09/19 3:29:33 PM GMT+2,new,1,"In scientific research (which field? e.g. machine learning, chemistry, robotics etc.)",3,to drive my equation and pass it to fitting,,Code that can be called from Python,1,,,"Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below)",,Improve numerical stability of generated code (please provide specifics below),my symbolic expression faces difficulty while lambdyfying is going.,"After running by lamdifying, numpy does not recognize it. Even as a string and with replace method for replacing exp, log and sqrt to numpy.exp, numpy.log and numpy.sqrt it doesn't work."
2022/09/19 5:36:20 PM GMT+2,Moderate user every other month,2,"In scientific research (which field? e.g. machine learning, chemistry, robotics etc.)",3,,,Code that can be called from Python;Code snippets to copy-paste into non-Python code,"1,2",,,"Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below);Printers (sympy.printing, which language? please specify below)",,"Generate code that can be called from more languages (which ones? please specify below);Improved documentation (e.g. greater explanation, more worked examples);Code generation of derivatives (i.e. gradients, Jacobians, Hessians)",The ability to add / patch missing cod generations or add new replacement strategies for how functions get converted to code ,
2022/09/19 5:55:05 PM GMT+2,Intermediate,2,"In notebooks/simple scripts that are run few times;In scientific research (which field? e.g. machine learning, chemistry, robotics etc.)","2,3","Physics, chemistry","Chemistry,Physics",Code that can be called from another language (which one? please specify below);Code snippets to copy-paste into non-Python code,"2,3",Julia,Julia,"Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below);Printers (sympy.printing, which language? please specify below)",,"Improved documentation (e.g. greater explanation, more worked examples)",,Thank you for the great work
2022/09/19 6:40:22 PM GMT+2,"Medium: used a couple SymPy functions for one project, wrote extensive SymPy documentation using doctest examples",2,In notebooks/simple scripts that are run few times,2,For doctests for documentation guide pages,,Code that can be called from Python,1,,,"Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below)",Create lambda functions to run in NumPy or SciPy,"Improved documentation (e.g. greater explanation, more worked examples)","More and better examples, for example don’t use implemented_function.","Having examples of interfacing with other tools is good, and it seems like there are several in the codegen module page, so that’s good. "
2022/09/19 8:09:01 PM GMT+2,Medium,2,"In scientific research (which field? e.g. machine learning, chemistry, robotics etc.);To generate code for use within a library (which one? please specify below)","3,5",Generation of fittting functions. Symbolic optimization by cse,Control,Code that can be called from Python,1,,,"Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below);Autowrap (sympy.autowrap);Ufuncify (sympy.ufuncify)",Number and cde,"Code generation of derivatives (i.e. gradients, Jacobians, Hessians);Speed up execution of generated code (please provide specifics below)",,
2022/09/19 9:02:31 PM GMT+2,Used a few times,1,"In scientific research (which field? e.g. machine learning, chemistry, robotics etc.)",3,Calculating Jacobians about a setpoint for Control problems/Kalman filters,Control,Code that can be called from Python,1,,,subs/evalf is sufficient for my numerical evaluation needs,,,,
2022/09/19 9:29:41 PM GMT+2,Advanced,3,"In scientific research (which field? e.g. machine learning, chemistry, robotics etc.);In production code;To generate code for use within a library (which one? please specify below)","3,4,5","Optimal control, trajectory optimisation, multibody dynamics, biomechanics","Control,Mechanics,Biomechanics",Code that can be called from Python;Code that can be called from another language (which one? please specify below);Code snippets to copy-paste into non-Python code,"1,2,3","Non-Python is C (to interface with Ipopt), but don’t really mind, just needs to be as fast as possible",C,"Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below);Autowrap (sympy.autowrap);Ufuncify (sympy.ufuncify);Printers (sympy.printing, which language? please specify below)","Lambdify with NumPy most, but JAX is a nice addition, have tried using Numba on lambdify code, printers and autowrap for C","Improved documentation (e.g. greater explanation, more worked examples);Support more mathematical functions (which ones? please specify below);Code generation of derivatives (i.e. gradients, Jacobians, Hessians);Speed up execution of generated code (please provide specifics below)","Better and smarter simplifications, weighing up the cost of various functions used in CSE and codegen","Use of lazy multitons in DAGs/e-graphs could improve CSE, symbolic derivatives, applications of rewrites"
2022/09/19 9:40:04 PM GMT+2,Newer,1,"In scientific research (which field? e.g. machine learning, chemistry, robotics etc.)",3,,,Code that can be called from Python,1,,,subs/evalf is sufficient for my numerical evaluation needs,,"Improved documentation (e.g. greater explanation, more worked examples);Code generation of derivatives (i.e. gradients, Jacobians, Hessians)",,
2022/09/19 9:52:37 PM GMT+2,,,"In notebooks/simple scripts that are run few times;In scientific research (which field? e.g. machine learning, chemistry, robotics etc.)","2,3","For dynamical systems (robotics, mechanics), sympy to python-control.","Control,Mechanics,Robotics",Code that can be called from Python,1,"Mechanics, Equation of Motion (EoM)",,,"# Simular to Underactuated Robotics
## https://underactuated.mit.edu/acrobot.html

def get_numpy(source):
    list_from = ['cos','sin','Abs']
    list_to = ['np.cos','np.sin','np.abs']
    
    result = str(source.tolist())
    for i in range(len(list_from)):
        result = result.replace(list_from[i], list_to[i])
    
    return result

Mq_n = get_numpy(Mq) # Massmatrix
gqqd_n = get_numpy(gqqd) # Coriolis and gravitational terms
Qq_n = get_numpy(Qq) # Generalized forces

rs1_n = get_numpy(rs1_I) # kinematics, position body1
rs2_n = get_numpy(rs2_I) # kinematics, position body2
rs3_n = get_numpy(rs3_I) # kinematics, position body3

import pickle

dict_bwg = {
    'Mq' : Mq_n,
    'gqqd' : gqqd_n,
    'Qq' : Qq_n,
    'rs1_n' : rs1_n,
    'rs2_n' : rs2_n,
    'rs3_n' : rs3_n
       }
f = open(""dreifachpendel.pkl"",""wb"")
pickle.dump(dict_bwg, f)
f.close()","Improved documentation (e.g. greater explanation, more worked examples)",Not sure. I have not tested the other ways for code generation.,Sympy is awesome for mechanics.
2022/09/20 9:18:47 AM GMT+2,Quite good,2,To generate code for use within a library (which one? please specify below),5,In my python package `py-pde` to parse mathematical expressions and compile them using numba,,Code that can be called from Python,1,I compile generated code with numba,,"Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below)",I use the NumPy backend and compile the resulting function with numba,"Support more mathematical functions (which ones? please specify below);Code generation of derivatives (i.e. gradients, Jacobians, Hessians)",Better support of arrays would be great,
2022/09/20 5:12:12 PM GMT+2,Advanced,3,"In scientific research (which field? e.g. machine learning, chemistry, robotics etc.);To generate code for use within a library (which one? please specify below)","3,5",,,Code that can be called from Python;Code that can be called from another language (which one? please specify below);Code snippets to copy-paste into non-Python code,"1,2,3","Print C or C++, either to compile separately, or to compile and wrap and called from Python","C,C++","Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below);Autowrap (sympy.autowrap);Ufuncify (sympy.ufuncify);Printers (sympy.printing, which language? please specify below)",Interested in the new JAX backend for AD,"Improved documentation (e.g. greater explanation, more worked examples);Code generation of derivatives (i.e. gradients, Jacobians, Hessians);Speed up execution of generated code (please provide specifics below);Improve numerical stability of generated code (please provide specifics below)",Would be great if SymPy behaved like an optimizing compiler,
2022/09/21 9:09:09 AM GMT+2,About 15 years of regular use and also a contributor to SymPy.,4,"For debugging symbolic code;In notebooks/simple scripts that are run few times;In scientific research (which field? e.g. machine learning, chemistry, robotics etc.);In production code;To generate code for use within a library (which one? please specify below)","1,2,3,4,5","dynamics (classical mechanics, multibody dynamics, etc)",Mechanics,Code that can be called from Python;Code that can be called from another language (which one? please specify below);Code snippets to copy-paste into non-Python code,"1,2,3","Mostly Python but lots of C too. I also have used it for Matlab/Octave, Fortran, R, and theano.","C,Matlab,Fortran,R,Theano","Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below);Autowrap (sympy.autowrap);Ufuncify (sympy.ufuncify);Printers (sympy.printing, which language? please specify below);subs/evalf is sufficient for my numerical evaluation needs",numpy backend for lambdify primarily; printers listed in prior question,"Improved documentation (e.g. greater explanation, more worked examples);Support more mathematical functions (which ones? please specify below);Code generation of derivatives (i.e. gradients, Jacobians, Hessians);Speed up execution of generated code (please provide specifics below);Improve numerical stability of generated code (please provide specifics below)",Will spend specifics in separate document.,"For learners, they often mix sympy code with other python numeric code and don't realize that the bridge really should be strictly lambdify unless they really want to do some special arbitrary precision calculation (which is rare for domain scientists). For documentation, it would be helpful to make that abundantly clear."
2022/09/21 9:54:53 PM GMT+2,Advanced,3,"In scientific research (which field? e.g. machine learning, chemistry, robotics etc.);In production code","3,4","1. Evaluate expressions for use in unit tests (formatted printing is usually good enough for the code generation step)
2. Derive expressions from a series of symbolic transformation steps and output the computer code.
3. Code for evaluating derivatives",,Code that can be called from Python;Code that can be called from another language (which one? please specify below);Code snippets to copy-paste into non-Python code,"1,2,3","For deriving expressions, the generated code can be Python, Julia, and C++. ","Julia,C++","Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below);Printers (sympy.printing, which language? please specify below)","I used printers for Python, Julia, and C++.  For lambdify, mostly the python(NumPy) backend.","Improved documentation (e.g. greater explanation, more worked examples);Code generation of derivatives (i.e. gradients, Jacobians, Hessians)","More support for integrating generated code into target languages.
For example, see the code generation for a templated C++ function: https://github.com/QMCPACK/qmcpack/blob/develop/src/Numerics/codegen/codegen_extras.py and https://github.com/QMCPACK/qmcpack/blob/develop/src/Numerics/codegen/gen_cubic_spline_solver.py
Fortunately, it's pretty easy to subclass the printer and add the needed functionality.",
2022/09/22 2:49:00 AM GMT+2,Intermediate,2,"In notebooks/simple scripts that are run few times;In scientific research (which field? e.g. machine learning, chemistry, robotics etc.)","2,3",,,Code that can be called from Python;Code snippets to copy-paste into non-Python code,"1,3",C/C++/Julia/Rust/FORTRAN,"C,C++,Julia,Rust,Fortran","Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below);Autowrap (sympy.autowrap);Ufuncify (sympy.ufuncify);Printers (sympy.printing, which language? please specify below)","Just want my code to be fast, have tried most things","Improved documentation (e.g. greater explanation, more worked examples);Speed up execution of generated code (please provide specifics below);Improve numerical stability of generated code (please provide specifics below)",,
2022/09/23 10:38:03 PM GMT+2,Basic,1,"In scientific research (which field? e.g. machine learning, chemistry, robotics etc.);In production code;To generate code for use within a library (which one? please specify below)","3,4,5",To generate expressions for analytical integrals over Gaussian type orbtials in quantum chemistry. The code can be found here: https://github.com/eljost/pysisyphus/blob/master/pysisyphus/wavefunction/gen_ints.py,"Chemistry,Physics",Code that can be called from Python,1,,,"Printers (sympy.printing, which language? please specify below)",,"Code generation of derivatives (i.e. gradients, Jacobians, Hessians)",,
2022/09/30 4:59:18 PM GMT+2,expert,2,"For debugging symbolic code;In notebooks/simple scripts that are run few times;In scientific research (which field? e.g. machine learning, chemistry, robotics etc.);In production code","1,2,3,4",chemistry,Chemistry,Code snippets to copy-paste into non-Python code,3,"Oftentimes I generated expressions as a separate (pre-build) step, in which source template files, e.g. system_variantA.cpp.template, are rendered to source files (e.g. .cpp files) which then are compiled into some application.",C++,"Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below);Printers (sympy.printing, which language? please specify below)",C++,Improve numerical stability of generated code (please provide specifics below),SymPy's CSE routine could probably still be improved. For example CSE could take into consideration e.g. that division is expensive.,
2022/10/06 8:35:52 PM GMT+2,basic,1,"In notebooks/simple scripts that are run few times;In scientific research (which field? e.g. machine learning, chemistry, robotics etc.)","2,3",,,,,,,"Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below)",,"Generate code that can be called from more languages (which ones? please specify below);Code generation of derivatives (i.e. gradients, Jacobians, Hessians)",,
2022/10/06 11:22:09 PM GMT+2,New,1,"In notebooks/simple scripts that are run few times;In scientific research (which field? e.g. machine learning, chemistry, robotics etc.)","2,3",Mechanical engineering,Mechanics,Code that can be called from Python,1,Numerically evaluate my functions,,"subs/evalf is sufficient for my numerical evaluation needs;Lambdify (sympy.lambdify, which backend? e.g. NumPy, CuPy, JAX etc. please specify below)",Lambdify is confusing. I make mistakes and error messages are not clear.,"Improved documentation (e.g. greater explanation, more worked examples);Code generation of derivatives (i.e. gradients, Jacobians, Hessians);Speed up execution of generated code (please provide specifics below)",I just want to put numpy arrays in my sympy equations. Lambdify produces slow code sometimes. I can write equivalent python functions that are faster,
2022/10/07 3:32:57 PM GMT+2,"Contributed, proposed major additions, written packages depending on it.",4,,,Nothing at this point,,,,Nothing at this point,,subs/evalf is sufficient for my numerical evaluation needs,,,,"I think code generation is a useful tool. However, I do not use it."
2022/10/14 9:30:55 PM GMT+2,Advanced beginner,2,"In scientific research (which field? e.g. machine learning, chemistry, robotics etc.)",3,For,,Code that can be called from Python;Code that can be called from another language (which one? please specify below),"1,2",C code which is then wrapped in a python function,C,,Codegen as described here: https://www.sympy.org/scipy-2017-codegen-tutorial/notebooks/08-cythonizing.html,"Improved documentation (e.g. greater explanation, more worked examples);Code generation of derivatives (i.e. gradients, Jacobians, Hessians)",,